# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B2nariu1hNyFmLAqD-tB4sUbfQgpA1sZ
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import time

def scrape_karkidi_jobs(keyword="data science", pages=1):
    headers = {'User-Agent': 'Mozilla/5.0'}
    base_url = "https://www.karkidi.com/Find-Jobs/{page}/all/India?search={query}"
    jobs_list = []

    for page in range(1, pages + 1):
        url = base_url.format(page=page, query=keyword.replace(' ', '%20'))
        print(f"Scraping page: {page}")
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.content, "html.parser")

        job_blocks = soup.find_all("div", class_="ads-details")
        for job in job_blocks:
            try:
                title = job.find("h4").get_text(strip=True)
                company = job.find("a", href=lambda x: x and "Employer-Profile" in x).get_text(strip=True)
                location = job.find("p").get_text(strip=True)
                experience = job.find("p", class_="emp-exp").get_text(strip=True)
                key_skills_tag = job.find("span", string="Key Skills")
                skills = key_skills_tag.find_next("p").get_text(strip=True) if key_skills_tag else ""
                summary_tag = job.find("span", string="Summary")
                summary = summary_tag.find_next("p").get_text(strip=True) if summary_tag else ""

                jobs_list.append({
                    "Title": title,
                    "Company": company,
                    "Location": location,
                    "Experience": experience,
                    "Summary": summary,
                    "Skills": skills
                })
            except Exception as e:
                print(f"Error parsing job block: {e}")
                continue

        time.sleep(1)  # Be nice to the server

    return pd.DataFrame(jobs_list)

# Example use:
if __name__ == "__main__":
    df_jobs = scrape_karkidi_jobs(keyword="data science", pages=2)
    print(df_jobs.head())

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer

def preprocess_data(df):
    # Combine summary and skills into one text column
    df["text"] = df["Summary"].fillna("") + " " + df["Skills"].fillna("")
    return df

from sklearn.cluster import KMeans
import joblib

def vectorize_and_cluster(df, num_clusters=5):
    vectorizer = TfidfVectorizer(stop_words='english', max_features=1000)
    X = vectorizer.fit_transform(df["text"])

    model = KMeans(n_clusters=num_clusters, random_state=42)
    df["cluster"] = model.fit_predict(X)

    # Save the models
    joblib.dump(vectorizer, "vectorizer.pkl")
    joblib.dump(model, "cluster_model.pkl")

    return df

df_jobs = scrape_karkidi_jobs("data science", pages=2)
df_preprocessed = preprocess_data(df_jobs)
df_clustered = vectorize_and_cluster(df_preprocessed)

df_clustered.to_csv("clustered_jobs.csv", index=False)

def get_jobs_by_cluster(df, cluster_id):
    return df[df["cluster"] == cluster_id][["Title", "Company", "Location", "Skills"]]